#!/bin/bash

# –¶–≤–µ—Ç–∞
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"
BLUE="\033[34m"
MAGENTA="\033[35m"
WHITE="\033[97m"
NC="\033[0m"
BOLD="\033[1m"

# –õ–æ–≥-—Ñ–∞–π–ª
LOG_FILE="/var/log/ddoser_script.log"
log_action() {
    echo "$(date '+%F %T') $1" >> "$LOG_FILE"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
os_name=$(grep -E "^NAME=" /etc/*release* 2>/dev/null | head -1 | cut -d'=' -f2 | tr -d '"')
os_version=$(grep -E "^VERSION_ID=" /etc/*release* 2>/dev/null | head -1 | cut -d'=' -f2 | tr -d '"')
if [[ -z "$os_version" ]]; then os_version=0; fi

# –¶–≤–µ—Ç –û–°
if [[ "$os_name" == *"Debian"* ]]; then
    if echo "$os_version <= 9" | bc -l | grep -q 1; then os_color="$WHITE";
    elif echo "$os_version == 10" | bc -l | grep -q 1; then os_color="$BLUE";
    else os_color="$GREEN"; fi
elif [[ "$os_name" == *"Ubuntu"* ]]; then
    if echo "$os_version <= 18" | bc -l | grep -q 1; then os_color="$WHITE";
    elif echo "$os_version == 20" | bc -l | grep -q 1; then os_color="$BLUE";
    else os_color="$GREEN"; fi
elif [[ "$os_name" == *"CentOS"* ]]; then
    if echo "$os_version <= 7" | bc -l | grep -q 1; then os_color="$MAGENTA";
    elif echo "$os_version == 8" | bc -l | grep -q 1; then os_color="$CYAN";
    else os_color="$WHITE"; fi
else
    os_color="$CYAN";
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
CONTROL_PANEL="none"
PANEL_LOG_PATHS=()
panel_login_url=""
CPIP=$(hostname -I | awk '{print $1}')

detect_control_panel() {
    if systemctl is-active --quiet hestia.service 2>/dev/null || systemctl list-units --type=service | grep -q hestia.service; then
        CONTROL_PANEL="hestia"
        PANEL_LOG_PATHS=(/var/log/apache2/domains/*.log)
        return
    fi
    if systemctl is-active --quiet ihttpd.service 2>/dev/null || systemctl list-units --type=service | grep -q ihttpd.service; then
        CONTROL_PANEL="ispmanager"
        PANEL_LOG_PATHS=(/var/www/httpd-logs/*access.log)
        return
    fi
    if systemctl is-active --quiet fastpanel2.service 2>/dev/null || systemctl list-units --type=service | grep -q fastpanel2.service; then
        CONTROL_PANEL="fastpanel"
        PANEL_LOG_PATHS=(/var/www/*/data/logs/*access.log)
        return
    fi
    if [[ -d "/usr/local/mgr5" ]] || [[ -d "/usr/local/fastpanel" ]]; then
        CONTROL_PANEL="fastpanel"
        PANEL_LOG_PATHS=(/var/www/*/data/logs/*access.log)
        return
    fi
    if [[ -d "/usr/local/vesta" ]]; then
        CONTROL_PANEL="vesta"
        PANEL_LOG_PATHS=(/var/log/nginx/domains/*.log)
        return
    fi
    if [[ -d "/usr/local/directadmin" ]]; then
        CONTROL_PANEL="directadmin"
        PANEL_LOG_PATHS=(/var/log/httpd/domains/*.log)
        return
    fi
    if [[ -d "/usr/local/cpanel" ]]; then
        CONTROL_PANEL="cpanel"
        PANEL_LOG_PATHS=(/usr/local/apache/domlogs/*.log)
        return
    fi
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if [[ -f "/var/log/nginx/access.log" ]]; then
        PANEL_LOG_PATHS=(/var/log/nginx/access.log)
    elif [[ -f "/var/log/apache2/access.log" ]]; then
        PANEL_LOG_PATHS=(/var/log/apache2/access.log)
    fi
}

detect_control_panel

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–∞–Ω–µ–ª—å (–ø—Ä–∏–º–µ—Ä –¥–ª—è ISPmanager/FastPanel)
isplogin() {
    local CPIP="$1"
    FVK=$(date | md5sum | head -c16)
    if [ -f "/usr/local/mgr5/sbin/mgrctl" ]; then
        /usr/local/mgr5/sbin/mgrctl -m ispmgr session.newkey username=root key="$FVK" sok=o >/dev/null 2>&1
        echo "https://${CPIP}:1500/manager/ispmgr?func=auth&username=root&key=${FVK}&checkcookie=no"
    fi
}
fp2login() {
    local CPIP="$1"
    echo "https://${CPIP}:8888/"
}
vestalogin() {
    local CPIP="$1"
    echo "https://${CPIP}:8083/"
}
dalogin() {
    local CPIP="$1"
    echo "https://${CPIP}:2222/"
}
whmlogin() {
    local CPIP="$1"
    echo "https://${CPIP}:2087/"
}

case "$CONTROL_PANEL" in
    ispmanager) panel_login_url=$(isplogin "$CPIP");;
    fastpanel) panel_login_url=$(fp2login "$CPIP");;
    vesta) panel_login_url=$(vestalogin "$CPIP");;
    directadmin) panel_login_url=$(dalogin "$CPIP");;
    cpanel) panel_login_url=$(whmlogin "$CPIP");;
    hestia) panel_login_url="(—Ä—É—á–Ω–æ–π –≤—Ö–æ–¥, –ø–æ—Ä—Ç 8083)";;
    *) panel_login_url="(–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)";;
esac

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –¥–ª—è –ª–æ–≥–æ–≤
TODAY=$(date '+%d/%b/%Y')
HOUR=$(date '+%H')

# –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤: —Ç–æ–ø IP, —Ç–æ–ø URI, —Ç–æ–ø User-Agent —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
analyze_logs() {
    local log_paths=("${PANEL_LOG_PATHS[@]}")
    echo -e "${YELLOW}${BOLD}–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è...${NC}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    show_progress 1 4 "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
    sleep 0.5
    
    show_progress 2 4 "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ–≤"
    sleep 0.3
    
    show_progress 3 4 "–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    sleep 0.3
    
    show_progress 4 4 "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞"
    sleep 0.2
    echo # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    
    # –¢–æ–ø IP —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
    echo -e "\n${YELLOW}${BOLD}–¢–æ–ø IP –ø–æ –ª–æ–≥–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è:${NC}"
    grep -h "$TODAY" ${log_paths[@]} 2>/dev/null | awk '{print $1}' | sort | uniq -c | sort -nr | head -20 | while read count ip; do
        if [[ -n "$ip" ]]; then
            local ip_info=$(get_ip_info "$ip")
            printf "%8s %-15s %s\n" "$count" "$ip" "$ip_info"
        fi
    done | tee /tmp/ddoser_top_ip.log
    
    # –¢–æ–ø URI
    echo -e "\n${CYAN}${BOLD}–¢–æ–ø URI –∑–∞ —Å–µ–≥–æ–¥–Ω—è:${NC}"
    grep -h "$TODAY" ${log_paths[@]} 2>/dev/null | awk '{print $7}' | sort | uniq -c | sort -nr | head -20 | tee /tmp/ddoser_top_uri.log
    
    # –¢–æ–ø User-Agent
    echo -e "\n${MAGENTA}${BOLD}–¢–æ–ø User-Agent –∑–∞ —Å–µ–≥–æ–¥–Ω—è:${NC}"
    grep -h "$TODAY" ${log_paths[@]} 2>/dev/null | awk -F'"' '{print $6}' | sort | uniq -c | sort -nr | head -15 | tee /tmp/ddoser_top_ua.log
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ SQL injection –≤ URI
    local sql_attacks=$(grep -h "$TODAY" ${log_paths[@]} 2>/dev/null | grep -i "union\|select\|insert\|delete\|update" | awk '{print $1}' | sort | uniq -c | sort -nr)
    if [[ -n "$sql_attacks" ]]; then
        echo -e "\n${RED}${BOLD}üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ SQL injection –∞—Ç–∞–∫–∏ (—Ç–æ–ø-10):${NC}"
        echo "$sql_attacks" | head -10 | while read count ip; do
            if [[ -n "$ip" ]]; then
                local ip_info=$(get_ip_info "$ip")
                printf "%8s %-15s %s\n" "$count" "$ip" "$ip_info"
            fi
        done
    fi
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ XSS –≤ URI
    local xss_attacks=$(grep -h "$TODAY" ${log_paths[@]} 2>/dev/null | grep -i "script\|alert\|onerror\|onload\|javascript" | awk '{print $1}' | sort | uniq -c | sort -nr)
    if [[ -n "$xss_attacks" ]]; then
        echo -e "\n${RED}${BOLD}üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ XSS –∞—Ç–∞–∫–∏ (—Ç–æ–ø-10):${NC}"
        echo "$xss_attacks" | head -10 | while read count ip; do
            if [[ -n "$ip" ]]; then
                local ip_info=$(get_ip_info "$ip")
                printf "%8s %-15s %s\n" "$count" "$ip" "$ip_info"
            fi
        done
    fi
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–æ—Ç–æ–≤ –≤ User-Agent
    local bot_agents=$(grep -h "$TODAY" ${log_paths[@]} 2>/dev/null | awk -F'"' '{print $6}' | grep -i "bot\|crawler\|spider\|scraper\|scanner" | sort | uniq -c | sort -nr)
    if [[ -n "$bot_agents" ]]; then
        echo -e "\n${BLUE}${BOLD}ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–æ—Ç—ã (—Ç–æ–ø-10):${NC}"
        echo "$bot_agents" | head -10
    fi
}

# –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
analyze_connections() {
    echo -e "\n${GREEN}${BOLD}–¢–æ–ø IP –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º (netstat):${NC}"
    netstat -ntu 2>/dev/null | awk 'NR>2{print $5}' | cut -d: -f1 | grep -v '^$' | sort | uniq -c | sort -nr | head -20 | tee /tmp/ddoser_top_conn.log
    echo -e "\n${BLUE}${BOLD}–¢–æ–ø IP –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º (ss):${NC}"
    ss -ntu 2>/dev/null | awk 'NR>1{print $5}' | cut -d: -f1 | grep -v '^$' | sort | uniq -c | sort -nr | head -20
}

# –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É
show_load() {
    echo -e "\n${YELLOW}${BOLD}–ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:${NC}"
    uptime
    echo -e "${CYAN}–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU:${NC}"
    ps aux --sort=-%cpu | head -10
    echo -e "${CYAN}–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–∞–º—è—Ç–∏:${NC}"
    ps aux --sort=-%mem | head -10
}

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥)
block_ip() {
    local ip="$1"
    local ip_info=$(get_ip_info "$ip")
    echo -e "${RED}${BOLD}–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP $ip $ip_info:${NC}"
    echo -e "${YELLOW}iptables:${NC} iptables -I INPUT -s $ip -j DROP"
    echo -e "${YELLOW}ipset:${NC} ipset add blacklist $ip"
    echo -e "${YELLOW}ufw:${NC} ufw deny from $ip"
    echo -e "${YELLOW}–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å:${NC}"
    echo -e "${CYAN}iptables -I INPUT -s $ip -j DROP && echo 'IP $ip –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'${NC}"
    log_action "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è $ip $ip_info"
}

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è)
block_ip_auto() {
    echo -e "\n${YELLOW}${BOLD}–¢–æ–ø IP –ø–æ –ª–æ–≥–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è:${NC}"
    local ip_list=()
    local counter=1
    
    # –ß–∏—Ç–∞–µ–º —Ç–æ–ø IP –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            # –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ —Å—Ç—Ä–æ–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
            local ip=$(echo "$line" | awk '{print $2}')
            if [[ -n "$ip" && "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                ip_list+=("$ip")
                echo -e "${counter}. $line"
                counter=$((counter + 1))
            fi
        fi
    done < /tmp/ddoser_top_ip.log
    
    if [[ ${#ip_list[@]} -eq 0 ]]; then
        echo -e "${RED}–ù–µ –Ω–∞–π–¥–µ–Ω–æ IP –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏${NC}"
        return
    fi
    
    echo -ne "\n${YELLOW}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ IP –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 3, 5 –∏–ª–∏ 1-3): ${NC}"
    read ip_choices
    
    if [[ -z "$ip_choices" ]]; then
        echo -e "${RED}–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω—ã IP –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!${NC}"
        return
    fi
    
    # –ü–∞—Ä—Å–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    local selected_ips=()
    IFS=','',' read -ra choices <<< "$ip_choices"
    for choice in "${choices[@]}"; do
        choice=$(echo "$choice" | tr -d ' ')
        if [[ "$choice" =~ ^[0-9]+-[0-9]+$ ]]; then
            # –î–∏–∞–ø–∞–∑–æ–Ω
            local start=$(echo "$choice" | cut -d'-' -f1)
            local end=$(echo "$choice" | cut -d'-' -f2)
            for ((i=start; i<=end; i++)); do
                if [[ $i -ge 1 && $i -le ${#ip_list[@]} ]]; then
                    selected_ips+=("${ip_list[$((i-1))]}")
                fi
            done
        elif [[ "$choice" =~ ^[0-9]+$ ]]; then
            # –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
            if [[ $choice -ge 1 && $choice -le ${#ip_list[@]} ]]; then
                selected_ips+=("${ip_list[$((choice-1))]}")
            fi
        fi
    done
    
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ IP
    for ip in "${selected_ips[@]}"; do
        echo -e "${CYAN}–ë–ª–æ–∫–∏—Ä—É—é IP: $ip${NC}"
        iptables -I INPUT -s "$ip" -j DROP 2>/dev/null
        if [[ $? -eq 0 ]]; then
            echo -e "${GREEN}‚úì IP $ip —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω${NC}"
            log_action "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω IP $ip"
        else
            echo -e "${RED}‚úó –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP $ip${NC}"
        fi
    done
}

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ User-Agent
block_user_agent() {
    echo -e "\n${MAGENTA}${BOLD}–¢–æ–ø User-Agent –∑–∞ —Å–µ–≥–æ–¥–Ω—è:${NC}"
    local ua_list=()
    local counter=1
    
    # –ß–∏—Ç–∞–µ–º —Ç–æ–ø User-Agent –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            ua_list+=("$line")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ + User-Agent)
            echo -e "${counter}. $line"
            counter=$((counter + 1))
        fi
    done < /tmp/ddoser_top_ua.log
    
    if [[ ${#ua_list[@]} -eq 0 ]]; then
        echo -e "${RED}–ù–µ –Ω–∞–π–¥–µ–Ω–æ User-Agent –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏${NC}"
        return
    fi
    
    echo -ne "\n${MAGENTA}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ User-Agent –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 3, 5 –∏–ª–∏ 1-3): ${NC}"
    read ua_choices
    
    if [[ -z "$ua_choices" ]]; then
        echo -e "${RED}–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω—ã User-Agent –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!${NC}"
        return
    fi
    
    # –ü–∞—Ä—Å–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    local selected_uas=()
    IFS=',' read -ra choices <<< "$ua_choices"
    for choice in "${choices[@]}"; do
        choice=$(echo "$choice" | tr -d ' ')
        if [[ "$choice" =~ ^[0-9]+-[0-9]+$ ]]; then
            # –î–∏–∞–ø–∞–∑–æ–Ω
            local start=$(echo "$choice" | cut -d'-' -f1)
            local end=$(echo "$choice" | cut -d'-' -f2)
            for ((i=start; i<=end; i++)); do
                if [[ $i -ge 1 && $i -le ${#ua_list[@]} ]]; then
                    selected_uas+=("${ua_list[$((i-1))]}")
                fi
            done
        elif [[ "$choice" =~ ^[0-9]+$ ]]; then
            # –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
            if [[ $choice -ge 1 && $choice -le ${#ua_list[@]} ]]; then
                selected_uas+=("${ua_list[$((choice-1))]}")
            fi
        fi
    done
    
    if [[ ${#selected_uas[@]} -eq 0 ]]; then
        echo -e "${RED}–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ User-Agent –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!${NC}"
        return
    fi
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ User-Agent –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (—É–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞—á–∞–ª–µ)
    local clean_uas=()
    for ua_line in "${selected_uas[@]}"; do
        # –ò–∑–≤–ª–µ–∫–∞–µ–º User-Agent –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞: "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ User-Agent"
        # –£–¥–∞–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
        local clean_ua=$(echo "$ua_line" | sed -E 's/^[[:space:]]*[0-9]+[[:space:]]*//')
        clean_uas+=("$clean_ua")
    done
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    local config_path=""
    local config_file=""
    case "$CONTROL_PANEL" in
        fastpanel)
            config_path="/etc/nginx/fastpanel2-includes"
            config_file="blockua.conf"
            ;;
        ispmanager)
            config_path="/etc/nginx/vhosts-includes"
            config_file="blockua.conf"
            ;;
        hestia)
            # –î–ª—è Hestia —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –≤ –¥–æ–º–∞—à–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            echo -e "${CYAN}–°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è Hestia...${NC}"
            local hestia_count=0
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã nginx.ssl.conf
            while IFS= read -r -d '' file; do
                if [[ -f "$file" ]]; then
                    local badbot_file="${file}_badbot"
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª _badbot
                    if [[ -f "$badbot_file" ]]; then
                        echo -e "${YELLOW}–§–∞–π–ª $badbot_file —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞.${NC}"
                        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª
                        echo "" >> "$badbot_file"
                        echo "# –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ $(date)" >> "$badbot_file"
                    else
                        echo -e "${CYAN}–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª: $badbot_file${NC}"
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                        {
                            echo "# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ User-Agent (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ DDoSer)"
                            echo "# –î–∞—Ç–∞: $(date)"
                        } > "$badbot_file"
                    fi
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    for ua in "${clean_uas[@]}"; do
                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ User-Agent
                        local escaped_ua=$(echo "$ua" | sed 's/[[\.*^$()+?{|]/\\&/g')
                        echo "if (\$http_user_agent ~ \"^${escaped_ua}$\") { return 444; }" >> "$badbot_file"
                    done
                    
                    hestia_count=$((hestia_count + 1))
                fi
            done < <(find /home -type f -name "nginx.ssl.conf" -print0 2>/dev/null)
            
            if [[ $hestia_count -eq 0 ]]; then
                echo -e "${RED}–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ nginx.ssl.conf –¥–ª—è Hestia${NC}"
                return
            else
                echo -e "${GREEN}‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–æ–º–µ–Ω–æ–≤ Hestia: $hestia_count${NC}"
                
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
                echo -e "${CYAN}–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é nginx...${NC}"
                if systemctl reload nginx 2>/dev/null || service nginx reload 2>/dev/null; then
                    echo -e "${GREEN}‚úì Nginx —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω${NC}"
                    echo -e "${GREEN}‚úì –î–æ–±–∞–≤–ª–µ–Ω—ã User-Agent: ${#clean_uas[@]} —à—Ç. –¥–ª—è $hestia_count –¥–æ–º–µ–Ω–æ–≤${NC}"
                    log_action "–î–æ–±–∞–≤–ª–µ–Ω—ã User-Agent: ${#clean_uas[@]} —à—Ç. –¥–ª—è $hestia_count –¥–æ–º–µ–Ω–æ–≤ (Hestia)"
                else
                    echo -e "${RED}‚úó –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ nginx${NC}"
                fi
            fi
            return
            ;;
        *)
            echo -e "${RED}–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ User-Agent –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è FastPanel, ISPmanager –∏ Hestia${NC}"
            return
            ;;
    esac
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è FastPanel –∏ ISPmanager
    local full_path="$config_path/$config_file"
    echo -e "${CYAN}–†–∞–±–æ—Ç–∞—é —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º: $full_path${NC}"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    mkdir -p "$config_path" 2>/dev/null
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if [[ -f "$full_path" ]]; then
        echo -e "${YELLOW}–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞.${NC}"
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
        local tmp_file="/tmp/blockua_new.rules"
        {
            echo ""
            echo "# –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ $(date)"
            echo ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
            for ua in "${clean_uas[@]}"; do
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ User-Agent
                local escaped_ua=$(echo "$ua" | sed 's/[[\.*^$()+?{|]/\\&/g')
                echo "if (\$http_user_agent ~ \"^${escaped_ua}$\") {"
                echo "    return 403;"
                echo "}"
            done
        } > "$tmp_file"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        cat "$tmp_file" >> "$full_path"
        rm -f "$tmp_file"
    else
        echo -e "${CYAN}–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: $full_path${NC}"
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
        {
            echo "# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ User-Agent (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ DDoSer)"
            echo "# –î–∞—Ç–∞: $(date)"
            echo ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
            for ua in "${clean_uas[@]}"; do
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ User-Agent
                local escaped_ua=$(echo "$ua" | sed 's/[[\.*^$()+?{|]/\\&/g')
                echo "if (\$http_user_agent ~ \"^${escaped_ua}$\") {"
                echo "    return 403;"
                echo "}"
            done
        } > "$full_path"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx
    echo -e "${CYAN}–ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx...${NC}"
    if nginx -t 2>/dev/null; then
        echo -e "${GREEN}‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è nginx –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞${NC}"
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
        echo -e "${CYAN}–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é nginx...${NC}"
        if systemctl reload nginx 2>/dev/null || service nginx reload 2>/dev/null; then
            echo -e "${GREEN}‚úì Nginx —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω${NC}"
            echo -e "${GREEN}‚úì –î–æ–±–∞–≤–ª–µ–Ω—ã User-Agent: ${#clean_uas[@]} —à—Ç.${NC}"
            log_action "–î–æ–±–∞–≤–ª–µ–Ω—ã User-Agent: ${#clean_uas[@]} —à—Ç."
        else
            echo -e "${RED}‚úó –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ nginx${NC}"
        fi
    else
        echo -e "${RED}‚úó –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx. –û—Ç–º–µ–Ω–∞.${NC}"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        echo -e "${YELLOW}–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:${NC}"
        cat "$full_path"
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if [[ ! -f "$full_path.backup" ]]; then
            rm -f "$full_path"
        fi
    fi
}

# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
save_report() {
    local now="$(date '+%Y-%m-%d %H:%M:%S')"
    echo -e "\n==============================" >> "$LOG_FILE"
    echo -e "DDoSer Report | $now" >> "$LOG_FILE"
    echo -e "==============================" >> "$LOG_FILE"
    echo -e "–¢–æ–ø IP –ø–æ –ª–æ–≥–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è:" >> "$LOG_FILE"
    cat /tmp/ddoser_top_ip.log >> "$LOG_FILE"
    echo -e "\n–¢–æ–ø URI –∑–∞ —Å–µ–≥–æ–¥–Ω—è:" >> "$LOG_FILE"
    cat /tmp/ddoser_top_uri.log >> "$LOG_FILE"
    echo -e "\n–¢–æ–ø User-Agent –∑–∞ —Å–µ–≥–æ–¥–Ω—è:" >> "$LOG_FILE"
    cat /tmp/ddoser_top_ua.log >> "$LOG_FILE"
    echo -e "\n–¢–æ–ø IP –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º (netstat):" >> "$LOG_FILE"
    cat /tmp/ddoser_top_conn.log >> "$LOG_FILE"
    echo -e "\n==============================\n" >> "$LOG_FILE"
    log_action "–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω"
}

# –†–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (N —Å–µ–∫—É–Ω–¥)
real_time_monitoring() {
    local log_paths=("${PANEL_LOG_PATHS[@]}")
    local tmpfile="/tmp/ddoser_realtime.log"
    read -p "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): " monitor_time
    if [[ -z "$monitor_time" ]]; then monitor_time=30; fi
    echo -e "${YELLOW}${BOLD}–í —Ç–µ—á–µ–Ω–∏–µ $monitor_time —Å–µ–∫—É–Ω–¥ –±—É–¥—É —Å–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö –∏ –ª–æ–≥–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...${NC}"
    rm -f "$tmpfile"
    (for log in "${log_paths[@]}"; do tail -F "$log" 2>/dev/null; done) | tee "$tmpfile" &
    TAIL_PID=$!
    sleep $monitor_time
    kill $TAIL_PID 2>/dev/null
    echo -e "\n${CYAN}${BOLD}–ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ $monitor_time —Å–µ–∫—É–Ω–¥:${NC}"
    if [[ -s "$tmpfile" ]]; then
        echo -e "${YELLOW}–¢–æ–ø IP:${NC}"
        awk '{print $1}' "$tmpfile" | sort | uniq -c | sort -nr | head -10
        echo -e "\n${CYAN}–¢–æ–ø URI:${NC}"
        awk '{print $7}' "$tmpfile" | sort | uniq -c | sort -nr | head -10
        echo -e "\n${RED}–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ IP (–±–æ–ª–µ–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤):${NC}"
        awk '{print $1}' "$tmpfile" | sort | uniq -c | awk '$1>100' | sort -nr
    else
        echo -e "${RED}–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö –∑–∞ $monitor_time —Å–µ–∫—É–Ω–¥.${NC}"
    fi
    rm -f "$tmpfile"
}

# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
show_progress() {
    local current=$1
    local total=$2
    local message=$3
    local width=50
    local progress=$((current * width / total))
    local percentage=$((current * 100 / total))
    
    printf "\r${CYAN}$message: [${NC}"
    for ((i=0; i<progress; i++)); do printf "${GREEN}‚ñà${NC}"; done
    for ((i=progress; i<width; i++)); do printf "‚ñë"; done
    printf "${CYAN}] %d%%${NC}" $percentage
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ whois
WHOIS_STATUS="unknown"
WHOIS_INSTALL_ATTEMPTED=false
WHOIS_FAILED_COUNT=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ IP
get_ip_info() {
    local ip="$1"
    if [[ "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ whois
        if ! command -v whois >/dev/null 2>&1; then
            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å whois –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if [[ "$WHOIS_INSTALL_ATTEMPTED" == "false" ]]; then
                WHOIS_INSTALL_ATTEMPTED=true
                echo -e "${YELLOW}–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é whois...${NC}" >&2
                
                if command -v apt-get >/dev/null 2>&1; then
                    if apt-get update >/dev/null 2>&1 && apt-get install -y whois >/dev/null 2>&1; then
                        WHOIS_STATUS="installed"
                    else
                        WHOIS_STATUS="install_failed"
                    fi
                elif command -v yum >/dev/null 2>&1; then
                    if yum install -y whois >/dev/null 2>&1; then
                        WHOIS_STATUS="installed"
                    else
                        WHOIS_STATUS="install_failed"
                    fi
                elif command -v dnf >/dev/null 2>&1; then
                    if dnf install -y whois >/dev/null 2>&1; then
                        WHOIS_STATUS="installed"
                    else
                        WHOIS_STATUS="install_failed"
                    fi
                else
                    WHOIS_STATUS="no_package_manager"
                fi
            fi
        else
            WHOIS_STATUS="available"
        fi
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ whois
        if command -v whois >/dev/null 2>&1 && [[ "$WHOIS_STATUS" != "install_failed" ]]; then
            local country=$(timeout 5 whois "$ip" 2>/dev/null | grep -i "country:\|Country:" | head -1 | awk '{print $2}' | tr -d '\r')
            local org=$(timeout 5 whois "$ip" 2>/dev/null | grep -i "org:\|organisation:\|OrgName:" | head -1 | sed 's/^[^:]*://g' | sed 's/^[ \t]*//g' | cut -c1-30 | tr -d '\r')
            
            if [[ -n "$country" && -n "$org" ]]; then
                echo "[$country/$org]"
                return
            elif [[ -n "$country" ]]; then
                echo "[$country]"
                return
            elif [[ -n "$org" ]]; then
                echo "[$org]"
                return
            else
                # whois –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ
                WHOIS_FAILED_COUNT=$((WHOIS_FAILED_COUNT + 1))
                echo "[Unknown]"
                return
            fi
        else
            # whois –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            echo "[No data]"
            return
        fi
    else
        echo "[IPv6/Local]"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å whois –≤ –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—Ç—ã
show_whois_status() {
    echo -e "\n${BOLD}${WHITE}=========================================${NC}"
    case "$WHOIS_STATUS" in
        "available")
            echo -e "${GREEN}‚úì –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è IP: whois –¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç—Ä–∞–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è${NC}"
            ;;
        "installed")
            echo -e "${GREEN}‚úì –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è IP: whois —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å—Ç—Ä–∞–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è${NC}"
            ;;
        "install_failed")
            echo -e "${YELLOW}‚ö†  –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è IP: –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å whois (—Å—Ç–∞—Ä–∞—è –û–°/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏?)${NC}"
            echo -e "${CYAN}   –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ whois –≤—Ä—É—á–Ω—É—é${NC}"
            ;;
        "no_package_manager")
            echo -e "${YELLOW}‚ö†  –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è IP: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä${NC}"
            echo -e "${CYAN}   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ whois –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω${NC}"
            ;;
        "unknown")
            if [[ "$WHOIS_FAILED_COUNT" -gt 0 ]]; then
                echo -e "${YELLOW}‚ö†  –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è IP: whois –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ $WHOIS_FAILED_COUNT IP –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å${NC}"
            fi
            ;;
    esac
    
    if [[ "$WHOIS_STATUS" == "install_failed" || "$WHOIS_STATUS" == "no_package_manager" ]]; then
        echo -e "${WHITE}   –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:${NC}"
        echo -e "${CYAN}   Ubuntu/Debian: apt-get install whois${NC}"
        echo -e "${CYAN}   CentOS/RHEL:   yum install whois${NC}"
        echo -e "${CYAN}   Fedora:        dnf install whois${NC}"
    fi
    echo -e "${BOLD}${WHITE}=========================================${NC}"
}

# –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
clear
printf "\033[1m\033[%sm==============================\n" "32"
printf " DDoSer: DDoS Protection - –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞—Ç–∞–∫\n"
echo -e " ${CYAN}–°–æ–∑–¥–∞–Ω–æ Vladislav Pavlovich –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤ TG @sysadminctl${NC}"
printf " –û–°: %s %s\n" "$os_name" "$os_version"
printf " –ü–∞–Ω–µ–ª—å: %s\n" "$CONTROL_PANEL"
printf "==============================\033[0m\n"
if [[ "$panel_login_url" != "" ]]; then
    echo -e "${CYAN}–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å: $panel_login_url${NC}"
fi

analyze_logs
analyze_connections
show_load
show_whois_status

# –ú–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
while true; do
    echo -e "\n${BOLD}${WHITE}+------------------------------------------+${NC}"
    echo -e "${BOLD}${WHITE}|              –ú–ï–ù–Æ –î–ï–ô–°–¢–í–ò–ô               |${NC}"
    echo -e "${BOLD}${WHITE}+------------------------------------------+${NC}"
    echo -e "${BOLD}${WHITE}| ${YELLOW}1${WHITE}. –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP                    |${NC}"
    echo -e "${BOLD}${WHITE}| ${MAGENTA}2${WHITE}. –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UA                    |${NC}"
    echo -e "${BOLD}${WHITE}| ${CYAN}3${WHITE}. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç                     |${NC}"
    echo -e "${BOLD}${WHITE}| ${BLUE}4${WHITE}. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–Ω–µ–ª—å           |${NC}"
    echo -e "${BOLD}${WHITE}| ${MAGENTA}5${WHITE}. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏       |${NC}"
    echo -e "${BOLD}${WHITE}| ${GREEN}6${WHITE}. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑                    |${NC}"
    echo -e "${BOLD}${WHITE}| ${RED}0${WHITE}. –í—ã—Ö–æ–¥                               |${NC}"
    echo -e "${BOLD}${WHITE}+------------------------------------------+${NC}"
    echo -ne "${BOLD}–í–∞—à –≤—ã–±–æ—Ä: ${NC}"
    read choice
    case $choice in
        1)
            block_ip_auto
            ;;
        2)
            block_user_agent
            ;;
        3)
            save_report
            echo -e "${GREEN}–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $LOG_FILE${NC}"
            ;;
        4)
            echo -e "${CYAN}–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å: $panel_login_url${NC}"
            ;;
        5)
            real_time_monitoring
            ;;
        6)
            echo -e "${YELLOW}–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑...${NC}"
            analyze_logs
            analyze_connections
            show_load
            show_whois_status
            ;;
        0)
            echo -e "${GREEN}–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ DDoSer! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è.${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 0 –¥–æ 6.${NC}"
            ;;
    esac
done
